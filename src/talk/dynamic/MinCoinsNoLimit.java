package talk.dynamic;import java.util.Arrays;/** * 面值问题: *      arr[] 是面值数组, 其中的值都是正数而且没有重复, 在给定一个正数 aim, 每个值都可以认为是一张面值, *          且认为张数都是无限的, 返回组成 aim 的最少货币数 * * * @author guojunshan * @date 2022/10/3 */public class MinCoinsNoLimit {    public static int minCoinsNoLimit(int[] arr, int aim) {        if (arr == null || arr.length == 0 || aim <= 0) {            return 0;        }        return process(arr, 0, aim);    }    /**     * 尝试策略     *     * @param arr   面值数组     * @param index 当前来到的索引小标     * @param rest  剩余金额     * @return 尝试结果     */    private static int process(int[] arr, int index, int rest) {        if (index == arr.length) {            return rest == 0 ? 0 : Integer.MAX_VALUE;        }        int next = Integer.MAX_VALUE;        for (int zhang = 0; (zhang * arr[index]) <= rest; zhang++) {            int res = process(arr, index + 1, rest - (zhang * arr[index]));            if (res != Integer.MAX_VALUE) {                next = Math.min(next, zhang + res);            }        }        return next;    }    public static int dp1(int[] arr, int aim) {        if (arr == null || arr.length == 0 || aim <= 0) {            return 0;        }        int N = arr.length;        int[][] dp = new int[N + 1][aim + 1];        dp[N][0] = 0;        for (int i = 1; i <= aim; i++) {            dp[N][i] = Integer.MAX_VALUE;        }        for (int index = N - 1; index >= 0; index--) {            for (int rest = 0; rest <= aim; rest++) {                int next = Integer.MAX_VALUE;                for (int zhang = 0; (zhang * arr[index]) <= rest; zhang++) {                    int res = dp[index + 1][ rest - (zhang * arr[index])];                    if (res != Integer.MAX_VALUE) {                        next = Math.min(next, zhang + res);                    }                }                dp[index][rest] = next;            }        }        return dp[0][aim];    }    public static int dp2(int[] arr, int aim) {        if (arr == null || arr.length == 0 || aim <= 0) {            return 0;        }        int N = arr.length;        int[][] dp = new int[N + 1][aim + 1];        dp[N][0] = 0;        for (int i = 1; i <= aim; i++) {            dp[N][i] = Integer.MAX_VALUE;        }        for (int index = N - 1; index >= 0; index--) {            for (int rest = 0; rest <= aim; rest++) {                dp[index][rest] = dp[index + 1][rest];                if (rest - arr[index] >= 0                        && dp[index][rest - arr[index]] != Integer.MAX_VALUE) {                    dp[index][rest] = Math.min(dp[index][rest], dp[index][rest - arr[index]] + 1);                }            }        }        return dp[0][aim];    }    private static int[] generateArray(int maxLen, int maxValue) {        int length = (int) (Math.random() * maxLen) + 1;        int[] arr = new int[length];        boolean[] check = new boolean[maxValue + 1];        for (int i = 0; i < length; i++) {            do {                arr[i] = (int) (Math.random() * maxValue) + 1;            } while (check[arr[i]]);            check[arr[i]] = true;        }        return arr;    }    // 为了测试    private static void printArray(int[] arr) {        System.out.println(Arrays.toString(arr));    }    public static void main(String[] args) {        int maxLen = 20;        int maxValue = 100;        int testTime = 1000;        System.out.println("功能测试开始");        for (int i = 0; i < testTime; i++) {            int[] ints = generateArray(maxLen, maxValue);            int aim = (int) (Math.random() * 20) + 1;            int res = minCoinsNoLimit(ints, aim);            int dp1 = dp1(ints, aim);            int dp2 = dp2(ints, aim);            if (res != dp2 || res != dp1) {                System.out.println("aim == " + aim);                System.out.println("res : " + res + " --- dp1 : " + dp1 + " --- dp2 : " + dp2);                printArray(ints);                return;            }        }        System.out.println("功能测试结束");    }}