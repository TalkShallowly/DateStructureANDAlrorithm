package talk.dynamic;import java.util.Arrays;/** * * 问题: *      arr[] 是货币数字, 其中的值都是正数, 在给定一个正数 aim, 每个值都认为是一张货币, *          即使是相同的面值的货币也认为每一张都是不同的, 求返回组成 aim 的方法数 * *             eg: arr = [1,1,1] , aim = 2 *                  第 0 个和第 1 个可以 2, *                  第 0 个和第 2 个可以 2, *                  第 1 个和第 2 个可以 2, *               总共 3 种方法, 返回 3 * *        使用模型: 从左向右的尝试模型 * * @author guojunshan * @date 2022/10/1 */public class CoinsWayEveryPaperDifferent {    public static int coinsWay(int[] arr, int aim) {        if (arr == null || arr.length == 0 || aim < 0){            return 0;        }        return process(arr,0,aim);    }    public static int process(int[] arr, int index, int rest){        if (rest < 0){            return 0;        }        if (index == arr.length){            return rest == 0 ? 1 : 0;        }        //选择当前位置的货币 + 未选择当前位置的货币        return process(arr,index + 1,rest - arr[index]) + process(arr,index + 1,rest);    }    public static int dp(int[] arr, int aim) {        if (arr == null || arr.length == 0 || aim < 0){            return 0;        }        int N = arr.length;        int[][] dp = new int[N + 1][aim + 1];        dp[N][0] = 1;        for (int index = N - 1; index >= 0; index--) {            for (int rest = 0; rest <= aim; rest++) {                dp[index][rest] = rest - arr[index] < 0 ?  dp[index + 1][rest] : dp[index + 1][rest - arr[index]] + dp[index + 1][rest];            }        }        return dp[0][aim];    }    public static int[] generateRandomArray(int maxLen, int maxValue){        int len = (int)(Math.random() * maxLen) + 1;        boolean[] repeat = new boolean[maxValue + 1];        int[] arr = new int[len];        for (int i = 0; i < len; i++) {            do {                arr[i] = (int)(Math.random() * maxValue) + 1;            }while (repeat[arr[i]]);            repeat[arr[i]] = true;        }        return arr;    }    public static void printArray(int[] arr){        System.out.println(Arrays.toString(arr));    }    public static void main(String[] args) {        int maxLen = 20;        int maxValue = 100;        int testTimes = 1000;        System.out.println("测试开始");        for (int i = 0; i < testTimes; i++) {            int[] ints = generateRandomArray(maxLen, maxValue);            int aim = (int)(Math.random() * maxValue) + 1;            int coinsWay = coinsWay(ints, aim);            int dp = dp(ints, aim);            if (coinsWay != dp){                System.out.println("coinsWay = " + coinsWay + "  :  dp = " + dp + " :  aim = "  + aim);                printArray(ints);                System.out.println("oops");                return;            }        }        System.out.println("测试结束");    }}