package talk.dynamic;/** * 整数拆分问题: *      给定一个正数 1, 裂开的方式有 1 种 {1} *      给定一个正数 2, 裂开的方式有 2 种 {1,1}, {2} *      给定一个正数 3, 裂开的方式有 3 种 {1,1,1}, {1,2}, {3} *      给定一个正数 4, 裂开的方式有 5 种 {1,1,1,1}, {1,1,2}, {1,3}, {2,2}, {4} *      给定一个正数 N, 求裂开方式的方法数 (后面裂开的数不能比前面的数小) * *      动态规划优化技巧: 斜率优化 * * @author guojunshan * @date 2022/10/3 */public class SpiltNumber {    public static int spilt(int N) {        if (N < 0) {            return 0;        }        return process(1, N);    }    private static int process( int limit, int rest){        if (rest == limit){            return 1;        }else if (rest < limit){            return rest == 0 ? 1 : 0;        }else {            int way = 0;            for (int i = limit; i <= rest; i++) {                way += process( i, rest - i);            }            return way;        }    }    public static int dp1(int N) {        if (N <= 0) {            return 0;        }        int[][] dp = new int[N + 1][N + 1];        for (int i = 0; i <= N; i++) {            dp[i][i] = 1;            dp[i][0] = 1;        }        for (int limit = N - 1; limit >= 1; limit--) {            for (int rest = limit + 1; rest <= N; rest++) {                for (int i = limit; i <= rest; i++) {                    dp[limit][rest] += dp[i][rest - i];                }            }        }        return dp[1][N];    }    public static int dp2(int N) {        if (N <= 0) {            return 0;        }        int[][] dp = new int[N + 1][N + 1];        for (int i = 0; i <= N; i++) {            dp[i][i] = 1;            dp[i][0] = 1;        }        for (int limit = N - 1; limit >= 1; limit--) {            for (int rest = limit + 1; rest <= N; rest++) {                dp[limit][rest] = dp[limit + 1][rest] +  dp[limit][rest - limit];            }        }        return dp[1][N];    }    public static void main(String[] args) {        int test = 1;        System.out.println(spilt(test));        System.out.println(dp1(test));        System.out.println(dp2(test));    }}