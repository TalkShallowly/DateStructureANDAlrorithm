package talk.tree.segmentTree;/** * 二维 indexTree 实现 * * 测试链接：https://leetcode.com/problems/range-sum-query-2d-mutable * * */public class IndexTree2D {//    https://leetcode.cn/problems/range-sum-query-2d-immutable/    static class NumMatrix {        private final int rowSize;        private final int colSize;        private final int[][] sumInts;        public NumMatrix(int[][] matrix) {            this.rowSize = matrix.length;            this.colSize = matrix[0].length;            sumInts = new int[rowSize + 1][colSize + 1];            for (int i = 0; i < matrix.length; i++) {                for (int j = 0; j < matrix[0].length; j++) {                    //初始 化时计算 数据范围和                    add(i, j, matrix[i][j]);                }            }        }        public void add(int row,int col, int value){            for (int k = row + 1; k <= rowSize; k += k & (-k)) {                for (int m = col + 1; m <= colSize; m += m & (-m)) {                    sumInts[k][m] += value;                }            }        }        private int sumRegion(int row1, int col1) {            int sum = 0;            for (int k = row1 + 1; k > 0; k -= k & (-k)) {                for (int m = col1 + 1; m > 0; m -= m & (-m)) {                    sum += sumInts[k][m];                }            }            return sum;        }        public int sumRegion(int row1, int col1, int row2, int col2) {            return sumRegion(row2 ,col2) - sumRegion(row2,col1 - 1) - sumRegion(row1 - 1 ,col2) + sumRegion(row1 - 1 ,col1 - 1);        }    }    public static void main(String[] args) {        int[][] original = {{3,0,1,4,2},{5,6,3,2,1},{1,2,0,1,5},{4,1,0,1,7},{1,0,3,0,5}};        NumMatrix numMatrix = new NumMatrix(original);        System.out.println("numMatrix.sumRegion(2,1,4,3) = " + numMatrix.sumRegion(2, 1, 4, 3));        System.out.println("numMatrix.sumRegion(1,1,2,2) = " + numMatrix.sumRegion(1, 1, 2, 2));        System.out.println("numMatrix.sumRegion(1,2,2,4) = " + numMatrix.sumRegion(1, 2, 2, 4));    }//    private final int rowSize;//    private final int colSize;////    private final int[][] trees;//    IndexTree2D(int rowSize, int colSize){//        this.rowSize = rowSize;//        this.colSize = colSize;//        this.trees = new int[rowSize + 1][colSize + 1];//    }//    public void add(int row, int col, int value){//        while (row <= rowSize){//            while (col <= colSize){//                trees[row][col] +=  value;//                col += col & (-col);//            }//            row += row & (-row);//        }//    }////    public int findRangeSum(int row, int col){//        int sum = 0;//        while (row > 0) {//            while (col > 0) {//                sum += trees[row][col];//                col -= col & (-col);//            }//            row -= row & (-row);//        }//        return sum;//    }//////    public int findRangeSum(int startRow, int endRow, int startCol, int endCol){//        return findRangeSum(endRow,endCol) - findRangeSum(startRow,endCol) - findRangeSum(endRow,startCol) + findRangeSum(startRow,startCol);//    }}