package talk.tree.treeTraversal;import java.util.ArrayList;import java.util.Arrays;import java.util.List;/** * 题目: 多叉树(公司层级结构) --> 公司每个员工都有一个快乐值 happy,发请柬参加聚会, 但前提是直接上下级不能邀请, 计算此次聚会的最大 happy 收益指 * *      可能性分析: *          1: X 来的最大收益 *                a: X 的上,下级不能来, * *          2: X 不来的最大收益 *                a : X 的上下级可能来,可能不来 * * */public class MaxHappy {    public static class Employee {        private int happy;        private List<Employee> employees = new ArrayList<>();        Employee(int _happy){            this.happy= _happy;        }    }    public static int maxHappy_01(Employee emp){        if (emp == null){            return 0;        }        return Math.max(process_01(emp,true),process_01(emp,false));    }    private static int process_01(Employee emp,boolean up){        int maxHappy = 0;        if (emp == null){            return 0;        }        //第一种方式: 当 boss 来的情况        if (up){            maxHappy = emp.happy;            for (Employee employee : emp.employees) {                maxHappy += process_01(employee,false);            }        }else {            for (Employee employee : emp.employees) {                maxHappy += Math.max(process_01(employee,true),process_01(employee,false));            }        }        return maxHappy;    }    public static class NodeInfo{        private int no;        private int yes;        NodeInfo(int _no, int _yes){            this.no= _no;            this.yes= _yes;        }    }    public static int maxHappy_02(Employee emp){        if (emp ==  null){            return 0;        }        NodeInfo info = process_02(emp);        return Math.max(info.no,info.yes);    }    private static NodeInfo process_02(Employee emp){        if (emp == null){            return new NodeInfo(0,0);        }        int no = 0;        int yes = emp.happy;        for (Employee next : emp.employees) {            NodeInfo nodeInfo = process_02(next);            no +=  Math.max(nodeInfo.no,nodeInfo.yes);            yes += nodeInfo.no;        }        return new NodeInfo(no,yes);    }    public static Employee generateRandomNode(int maxLevel, int maxValue,int maxEmpNum){        return generate(1,maxLevel,maxValue,maxEmpNum);    }    private static Employee generate(int level,int maxLevel,int maxValue,int maxEmpNum){        if (level > maxLevel || Math.random() > 0.5){            return null;        }        Employee employee = new Employee((int)(Math.random() * maxValue) + 1);        employee.employees = new ArrayList<>();        for (int i = 0; i < (int)((Math.random() * maxEmpNum) + 1); i++) {            employee.employees.add(generate(level + 1,maxLevel,maxValue,maxEmpNum));        }        return employee;    }    public static Employee testInstance(){        Employee employee = new Employee(1);        Employee employee1 = new Employee(1);        employee1.employees = Arrays.asList(new Employee(19),                new Employee(8));        Employee employee2 = new Employee(8);        employee.employees = Arrays.asList(employee1,employee2);        return employee;    }    public static void main(String[] args) {////        System.out.println(maxHappy_01(testInstance()));//        System.out.println(maxHappy_02(testInstance()));        int maxLevel = 10;        int maxValue = 200;        int maxEmpNum = 6;        int testTime = 10000;        System.out.println("Start...........");        for (int i = 0; i < testTime; i++) {            Employee employee = generateRandomNode(maxLevel, maxValue, maxEmpNum);            if (maxHappy_01(employee) != maxHappy_02(employee)){                System.out.println(maxHappy_01(employee) + "=======" + maxHappy_02(employee));                System.out.println("Oops");            }        }        System.out.println("Finish..........");    }}