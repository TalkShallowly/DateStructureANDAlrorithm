package talk.monotonous_stack.fibonacci;import java.util.Arrays;/** * 区域填充问题: *      有一个 2行 , N 列的矩阵, 当前只有 1 * 2 的瓷砖, 当 N 为指定数, 将区域填充满的方法数 * *      分析: *          当横向铺的时候, 剩余 N - 2 的长度需要填充 *          当纵向铺的时候, 剩余 N - 1 的长度需要填充 *          则 f(N) = f(N - 1) + f(N - 2) */public class MatrixFilling {    public static long fillingKinds(int N){        if (N <= 0){            return 0;        }else if (N == 1){            return 1;        }else if (N == 2){            return 2;        }else {            long[][] matrix = {{1,1},                              {1,0}};            long[][] process = process(N - 2, matrix);            return 2 * process[0][0] + process[1][0];        }    }    private static long[][] process(int N, long[][] matrix){        long[][] res = new long[matrix.length][matrix[0].length];        for (int i = 0; i < matrix.length; i++) {            res[i][i] = 1;        }        long[][] record = matrix;        while (N != 0){            if ((N & 1) != 0){               res = matrixMultiply(record,res);            }            record = matrixMultiply(record,record);            N >>= 1;        }        return res;    }    private static long[][] matrixMultiply(long[][] a, long[][] b){        int row = a.length;        int col = b[0].length;        long[][] res = new long[row][col];        for (int i = 0; i < row; i++) {            for (int j = 0; j < col; j++) {                for (int k = 0; k < a[0].length; k++) {                    res[i][j] += a[i][k] * b[k][j];                }            }        }        return res;    }    public static long test(int N){        if (N <= 0){            return 0;        }else if (N == 1){            return 1;        }else if (N == 2){            return 2;        }else {            long first = 1;            long second = 2;            for (int i = 3; i < N; i++) {                long res = first + second;                first = second;                second = res;            }            return first + second;        }    }    public static void main(String[] args) {        System.out.println(fillingKinds(20));        System.out.println(test(20));        long[][] matrix = {{1,1},                {1,0}};        System.out.println(Arrays.deepToString(matrixMultiply(matrix, matrix)));    }}