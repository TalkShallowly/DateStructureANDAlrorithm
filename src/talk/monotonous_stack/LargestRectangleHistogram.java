package talk.monotonous_stack;import java.util.Arrays;import java.util.Stack;/** * 单调栈问题: *      给定一个非负整数组 arr[], 其中的数代表直方图的高度, 求返回整体直方图的最大长方形面积 * *      测试链接：https://leetcode.com/problems/largest-rectangle-in-histogram */public class LargestRectangleHistogram {    public static int largestRectangleArea(int[] arr){        if (arr == null || arr.length == 0){            return 0;        }        Stack<Integer> stack = new Stack<>();        int maxArea = 0;        for (int i = 0; i < arr.length; i++) {            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]){                int pop = stack.pop();                int area = stack.isEmpty() ?  arr[pop] * i :  arr[pop] * (i - stack.peek() - 1);                maxArea = Math.max(maxArea, area);            }            stack.add(i);        }        while (!stack.isEmpty()){            int pop = stack.pop();            //此时栈中剩余的数据都是后面没有比自己小的数据,所以最后的索引位置为数组的长度            int area = stack.isEmpty() ?  arr[pop] * arr.length:  arr[pop] * (arr.length - stack.peek() - 1);            maxArea = Math.max(maxArea, area);        }        return maxArea;    }    /**     * 优化 : 使用数组栈,代替系统栈     * @param arr 直方图数组     * @return 最大长方形面积     */    public static int largestRectangleArea2(int[] arr){        if (arr == null || arr.length == 0){            return 0;        }        int[] stack = new int[arr.length];        int size = 0;        int maxArea = 0;        for (int i = 0; i < arr.length; i++) {            while (size != 0 && arr[stack[size - 1]] >= arr[i]){                int pop = stack[--size];                int area = size == 0 ?  arr[pop] * i :  arr[pop] * (i - stack[size - 1] - 1);                maxArea = Math.max(maxArea, area);            }            stack[size++] = i;        }        while (size != 0){            int pop = stack[--size];            int area = size == 0 ?  arr[pop] *  arr.length :  arr[pop] * ( arr.length - stack[size - 1] - 1);            maxArea = Math.max(maxArea, area);        }        return maxArea;    }    public static int test(int[] arr){        if (arr == null || arr.length == 0){            return 0;        }        int maxArea = 0;        for (int i = 0; i < arr.length; i++) {            //找左边小于当前数的位置索引            int len = 1;            for (int left = i - 1; left >= 0; left--) {                if (arr[left] >= arr[i]){                    len++;                }else {                    break;                }            }            //在右边找小于当前数的索引            for (int right = i + 1; right < arr.length; right++) {                if (arr[right] >= arr[i]){                    len++;                }else {                    break;                }            }            maxArea = Math.max(maxArea, arr[i] * len);        }        return maxArea;    }    private static int[] generatorRandomArray(int maxLen, int maxVal){        int len = (int) (Math.random() * maxLen) + 1;        int[] arr = new int[len];        for (int i = 0; i < len; i++) {            arr[i] = (int) (Math.random() * maxVal) + 1;        }        return arr;    }    public static void main(String[] args) {        int maxLen = 500;        int maxValue = 100;        int testNum = 1000;        System.out.println("测试开始!");        for (int i = 0; i < testNum; i++) {            int[] ints = generatorRandomArray(maxLen, maxValue);            long l = largestRectangleArea(ints);            int area2 = largestRectangleArea2(ints);            long test = test(ints);            if (l != test || l != area2){                System.out.println(Arrays.toString(ints));                System.out.println(" L : " + l + " == area2: " + area2 + " == test:  " + test);                return;            }        }        System.out.println("测试结束!");////        int[] arr = {6, 6, 10, 9, 2};//        long l = largestRectangleHistogram(arr);//        long test = test(arr);//        System.out.println(l + " test : " + test);    }}