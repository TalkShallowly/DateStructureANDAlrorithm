package talk.monotonous_stack;import java.util.Stack;/** * 最大矩阵问题: *      给定一个二维数组 matrix , 其中的值不是 0 就是 1, 返回全部由 1 组成的最大子矩阵内部有多少个 1 * * 测试链接：https://leetcode.com/problems/maximal-rectangle/ */public class MaximalRectangle {    public static int maximalRectangle(char[][] matrix){        if (matrix == null || matrix.length == 0){            return 0;        }        //第一步: 将字符串转为数组        int[][] convert = convert(matrix);        //第二步: 先计算第一行的数据        int res = monotonousStack(convert[0]);        for (int i = 1; i < convert.length; i++) {            //第三步: 将第一行的数据与第二行的数据进行相加, 如果第二行的数据为 0 则填充 0            for (int k = 0; k < convert[0].length; k++) {                convert[i][k] = (convert[i][k] == 0 ? 0 : convert[i - 1][k] + convert[i][k]);            }            //第四步: 计算之前行与当前行的最大面积            res = Math.max(res,monotonousStack(convert[i]));        }        return res;    }    /**     * 转换函数: 将 char 类型转为 int 类型     * @param matrix 矩阵     * @return 返回 int 矩阵     */    private static int[][] convert(char[][] matrix){        int[][] ints = new int[matrix.length][matrix[0].length];        for (int i = 0; i < matrix.length; i++) {            for (int k = 0; k < matrix[i].length; k++) {                ints[i][k] = (int) matrix[i][k] - 48;            }        }        return ints;    }    /**     * 单调栈实现 (使用 数组实现)     * @param arr 数组     * @return 数组中最大的 1 连续面积     */    private static int monotonousStack(int[] arr){        int maxArea = 0;        int[] stack = new int[arr.length];        int size = 0;//        Stack<Integer> stack = new Stack<>();        for (int i = 0; i < arr.length; i++) {            while (size != 0 && arr[stack[size - 1]] >= arr[i]){                int pop = stack[--size];                int area = size == 0 ? arr[pop] * i : arr[pop] * (i - stack[size - 1] - 1);                maxArea = Math.max(maxArea, area);            }            stack[size++] = i;        }        while (size != 0){            int pop = stack[--size];            int area = size == 0? arr[pop] * arr.length : arr[pop] * (arr.length - stack[size - 1] - 1);            maxArea = Math.max(maxArea, area);        }        return maxArea;    }    public static void main(String[] args) {//        int[][] arr = {{1,1,0,0,1},{1,1,0,0,1},{1,1,0,0,1},{1,1,0,0,1}};//        char[][] chars = {{'1','0','1','0','0'},{'1','0','1','1','1'},{'1','1','1','1','1'},{'1','0','0','1','0'}};//        char[][] chars = {{'0','1'},{'1','0'}};        char[][] chars = {{'1'}};        System.out.println(maximalRectangle(chars));//        System.out.println(monotonousStack(arr));    }}