package talk.linkedList;

import java.util.HashSet;

/**
 * 题目：
 *      给定两个可能有环也可能无环的单链表头节点head1和head2，请实现一个函数：
 *          如果两个链表相交，返回两个链表相交的第一个节点，如果不相交，返回null；‘
 *     要求：
 *          如果两个链表长度之和为N，时间复杂度达到 O(N)    额外空间复杂度O(1)
 *
 *     题解思路：
 *          1）： 容器法： HashSet()结构实现
 *          2）： 快慢指针法： 满足条件的情况： 两链表都为有环，或者无环
 *                      ①： 先判断每条链表是否有环或者无环，若有环， 返回第一个进环节点， 无环， 返回null
 *                             判断技巧：当快指针和满指针相遇时，将快指针重置为头节点开始，每次走一步，再次与慢指针相遇时的节点，即为入环节点
 *                      ②： 都为无环链表：将两链表按同样长度，依次比较地址值即可
 *                      ③： 有环链表：
 *                          A：两链表不相交，但都时有环链表
 *                          B: 两链表入环节点为同一个节点
 *                          C：两链表入环节点为不同节点  ---》 返回任意一个链表入环节点即可
 */
public class FindFirstIntersectNode {

}
