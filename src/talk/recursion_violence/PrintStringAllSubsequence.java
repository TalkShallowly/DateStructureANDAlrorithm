package talk.recursion_violence;import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.List;/** *  问题: 打印一个字符串所有的子序列 * * @author guojunshan * @date 2022/7/29 */public class PrintStringAllSubsequence {    public static List<String> printSubsequence(String str){        if (str == null || str.length() < 1){            return null;        }        char[] chars = str.toCharArray();        List<String> ans = new ArrayList<>();        process(chars,0,ans,"");        return ans;    }    /**     * 一个执行方法,需要的参数设计需要合理规划     * @param chars 字符串的固定长度     * @param index 当前所到达的字节数组的下标     * @param ans 符合条件结果集合     * @param preRes 之前决定的路径参数, chars[0..index-1]已经走过了！之前的决定，都在preRes上, 而且之前的决定     *               不可以改变,只能改变 index 之后的参数选择     */    private static void process(char[] chars, int index, List<String> ans, String preRes){        if (index == chars.length){            ans.add(preRes);            return;        }        //不选择当前字节        process(chars,index + 1,ans,preRes);        //选择当前字节        process(chars,index + 1,ans,preRes + chars[index]);    }    /**     * 打印所有字符串子序列 -- 去重复     */    public static List<String> printSubsequence_noRepeat(String str){        if (str == null || str.length() < 1){            return null;        }        char[] chars = str.toCharArray();        HashSet<String> set = new HashSet<>();        process_02(chars,0,set,"");        return set.stream().toList();    }    /**     * 一个执行方法,需要的参数设计需要合理规划     * @param chars 字符串的固定长度     * @param index 当前所到达的字节数组的下标     * @param ans 符合条件结果集合     * @param preRes 之前决定的路径参数, chars[0..index-1]已经走过了！之前的决定，都在preRes上, 而且之前的决定     *               不可以改变,只能改变 index 之后的参数选择     */    private static void process_02(char[] chars, int index, HashSet<String> ans, String preRes){        if (index == chars.length){            ans.add(preRes);            return;        }        //不选择当前字节        process_02(chars,index + 1,ans,preRes);        //选择当前字节        process_02(chars,index + 1,ans,preRes + chars[index]);    }    public static void main(String[] args) {        String str = "abcc";//        printSubsequence(str).forEach(System.out::println);        printSubsequence_noRepeat(str).forEach(System.out::println);    }}