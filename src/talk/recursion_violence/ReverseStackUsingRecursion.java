package talk.recursion_violence;import java.util.Stack;/** * <pre> *  栈反转: *      问题: 给定一个 Stack 结构, 要求逆序这个 Stack 结构中的数据, * *      限定: 不可以申请额外的数据结构, 并且使用递归实现 * </pre> * @author guojunshan * @date 2022/7/29 */public class ReverseStackUsingRecursion {    //核心点: 使用一个黑盒, 将栈中的最后一个元素 返回 (利用 jvm 自带的 stack 进行操作)    public static void reverseStack(Stack<String> stack){        if (!stack.isEmpty()){            String lastData = lastData(stack);            reverseStack(stack);            stack.push(lastData);        }    }    /**     * 黑盒: 返回栈内最后一个元素     */    private static String lastData(Stack<String> stack){        if (stack.isEmpty()){            return "";        }        String result = stack.pop();        if (stack.isEmpty()){            return result;        }else {            String lastData = lastData(stack);            stack.push(result);            return lastData;        }    }    public static void main(String[] args) {        Stack<String> stack = new Stack<>();        stack.push("亚索");        stack.push("赵信");        stack.push("李青");        stack.push("凯尔");        reverseStack(stack);        stack.forEach(System.out::println);    }}