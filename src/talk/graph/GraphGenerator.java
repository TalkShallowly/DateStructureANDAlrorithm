package talk.graph;import java.util.*;/** * 图的生成: *      给定一个邻接矩阵,求返回生成的图 *           matrix 所有的边 , N*3 的矩阵 * 	   [weight, from节点上面的值，to节点上面的值] * * 	   Example : * 	        [ 5 , 0 , 7] * 	        [ 3 , 0,  1] */public class GraphGenerator {    public static Graph createGraph(int[][] matrix){        Map<Integer,Node> nodes = new HashMap<>();        List<Edge> edges = new ArrayList<>();        for (int[] ints : matrix) {            int weight = ints[0];            int from = ints[1];            int to = ints[2];            if (!nodes.containsKey(from)) {                nodes.put(from,new Node(from));            }            if (!nodes.containsKey(to)) {                nodes.put(to,new Node(to));            }            Edge edge = new Edge(weight, nodes.get(from), nodes.get(to));            nodes.get(from).out++;            nodes.get(from).nexts.add(nodes.get(to));            nodes.get(from).edges.add(edge);            nodes.get(to).in++;            edges.add(edge);        }        return new Graph(new ArrayList<>(nodes.values()),edges);    }    public static void main(String[] args) {        int[][] matrix = {{5,2,1},{2,1,0},{3,2,0}};        Graph graph = createGraph(matrix);        System.out.println("");    }}